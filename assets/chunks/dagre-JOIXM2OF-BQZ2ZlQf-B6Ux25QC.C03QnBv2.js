import{S as m,y as F,p as Y,m as L,u as M,a as i,b as K,F as j,d as H,i as U,X as W,U as Z,f as D,T as $,J as q,Y as z}from"./theme.DJ3VxS9h.js";import{y as G}from"./graph-CEr68mXP-1dFhErmU.Ba2mhXIw.js";import{i as Q}from"./layout-HZsKWTKJ-CGBWOSDk.Cg-pu21r.js";import{O as S}from"./baseUniq-nws7t5oA-CUAghAso.Cskx6TPE.js";import{n as V}from"./clone-31Rw_TO0-nKLoicT-.sj6Uwoq1.js";import{l as J}from"./basePickBy-BcqGVbfA-CJ09xwLQ.CuyUYld0.js";import"./framework.D2JuLAqv.js";function X(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:_(e),edges:ee(e)};return S(e.graph())||(n.value=V(e.graph())),n}function _(e){return J(e.nodes(),function(n){var t=e.node(n),o=e.parent(n),c={v:n};return S(t)||(c.value=t),S(o)||(c.parent=o),c})}function ee(e){return J(e.edges(),function(n){var t=e.edge(n),o={v:n.v,w:n.w};return S(n.name)||(o.name=n.name),S(t)||(o.value=t),o})}var l=new Map,N=new Map,k=new Map,te=m(()=>{N.clear(),k.clear(),l.clear()},"clear"),I=m((e,n)=>{const t=N.get(n)||[];return i.trace("In isDescendant",n," ",e," = ",t.includes(e)),t.includes(e)},"isDescendant"),ne=m((e,n)=>{const t=N.get(n)||[];return i.info("Descendants of ",n," is ",t),i.info("Edge is ",e),e.v===n||e.w===n?!1:t?t.includes(e.v)||I(e.v,n)||I(e.w,n)||t.includes(e.w):(i.debug("Tilt, ",n,",not in descendants"),!1)},"edgeInCluster"),P=m((e,n,t,o)=>{i.warn("Copying children of ",e,"root",o,"data",n.node(e),o);const c=n.children(e)||[];e!==o&&c.push(e),i.warn("Copying (nodes) clusterId",e,"nodes",c),c.forEach(d=>{if(n.children(d).length>0)P(d,n,t,o);else{const r=n.node(d);i.info("cp ",d," to ",o," with parent ",e),t.setNode(d,r),o!==n.parent(d)&&(i.warn("Setting parent",d,n.parent(d)),t.setParent(d,n.parent(d))),e!==o&&d!==e?(i.debug("Setting parent",d,e),t.setParent(d,e)):(i.info("In copy ",e,"root",o,"data",n.node(e),o),i.debug("Not Setting parent for node=",d,"cluster!==rootId",e!==o,"node!==clusterId",d!==e));const s=n.edges(d);i.debug("Copying Edges",s),s.forEach(f=>{i.info("Edge",f);const E=n.edge(f.v,f.w,f.name);i.info("Edge data",E,o);try{ne(f,o)?(i.info("Copying as ",f.v,f.w,E,f.name),t.setEdge(f.v,f.w,E,f.name),i.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))):i.info("Skipping copy of edge ",f.v,"-->",f.w," rootId: ",o," clusterId:",e)}catch(b){i.error(b)}})}i.debug("Removing node",d),n.removeNode(d)})},"copy"),B=m((e,n)=>{const t=n.children(e);let o=[...t];for(const c of t)k.set(c,e),o=[...o,...B(c,n)];return o},"extractDescendants"),ae=m((e,n,t)=>{const o=e.edges().filter(s=>s.v===n||s.w===n),c=e.edges().filter(s=>s.v===t||s.w===t),d=o.map(s=>({v:s.v===n?t:s.v,w:s.w===n?n:s.w})),r=c.map(s=>({v:s.v,w:s.w}));return d.filter(s=>r.some(f=>s.v===f.v&&s.w===f.w))},"findCommonEdges"),x=m((e,n,t)=>{const o=n.children(e);if(i.trace("Searching children of id ",e,o),o.length<1)return e;let c;for(const d of o){const r=x(d,n,t),s=ae(n,t,r);if(r)if(s.length>0)c=r;else return r}return c},"findNonClusterChild"),O=m(e=>!l.has(e)||!l.get(e).externalConnections?e:l.has(e)?l.get(e).id:e,"getAnchorId"),ie=m((e,n)=>{if(!e||n>10){i.debug("Opting out, no graph ");return}else i.debug("Opting in, graph ");e.nodes().forEach(function(t){e.children(t).length>0&&(i.warn("Cluster identified",t," Replacement id in edges: ",x(t,e,t)),N.set(t,B(t,e)),l.set(t,{id:x(t,e,t),clusterData:e.node(t)}))}),e.nodes().forEach(function(t){const o=e.children(t),c=e.edges();o.length>0?(i.debug("Cluster identified",t,N),c.forEach(d=>{const r=I(d.v,t),s=I(d.w,t);r^s&&(i.warn("Edge: ",d," leaves cluster ",t),i.warn("Descendants of XXX ",t,": ",N.get(t)),l.get(t).externalConnections=!0)})):i.debug("Not a cluster ",t,N)});for(let t of l.keys()){const o=l.get(t).id,c=e.parent(o);c!==t&&l.has(c)&&!l.get(c).externalConnections&&(l.get(t).id=c)}e.edges().forEach(function(t){const o=e.edge(t);i.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(t)),i.warn("Edge "+t.v+" -> "+t.w+": "+JSON.stringify(e.edge(t)));let c=t.v,d=t.w;if(i.warn("Fix XXX",l,"ids:",t.v,t.w,"Translating: ",l.get(t.v)," --- ",l.get(t.w)),l.get(t.v)||l.get(t.w)){if(i.warn("Fixing and trying - removing XXX",t.v,t.w,t.name),c=O(t.v),d=O(t.w),e.removeEdge(t.v,t.w,t.name),c!==t.v){const r=e.parent(c);l.get(r).externalConnections=!0,o.fromCluster=t.v}if(d!==t.w){const r=e.parent(d);l.get(r).externalConnections=!0,o.toCluster=t.w}i.warn("Fix Replacing with XXX",c,d,t.name),e.setEdge(c,d,o,t.name)}}),i.warn("Adjusted Graph",X(e)),T(e,0),i.trace(l)},"adjustClustersAndEdges"),T=m((e,n)=>{var c,d;if(i.warn("extractor - ",n,X(e),e.children("D")),n>10){i.error("Bailing out");return}let t=e.nodes(),o=!1;for(const r of t){const s=e.children(r);o=o||s.length>0}if(!o){i.debug("Done, no node has children",e.nodes());return}i.debug("Nodes = ",t,n);for(const r of t)if(i.debug("Extracting node",r,l,l.has(r)&&!l.get(r).externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",n),!l.has(r))i.debug("Not a cluster",r,n);else if(!l.get(r).externalConnections&&e.children(r)&&e.children(r).length>0){i.warn("Cluster without external connections, without a parent and with children",r,n);let s=e.graph().rankdir==="TB"?"LR":"TB";(d=(c=l.get(r))==null?void 0:c.clusterData)!=null&&d.dir&&(s=l.get(r).clusterData.dir,i.warn("Fixing dir",l.get(r).clusterData.dir,s));const f=new G({multigraph:!0,compound:!0}).setGraph({rankdir:s,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});i.warn("Old graph before copy",X(e)),P(r,e,f,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:l.get(r).clusterData,label:l.get(r).label,graph:f}),i.warn("New graph after copy node: (",r,")",X(f)),i.debug("Old graph after copy",X(e))}else i.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!l.get(r).externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),n),i.debug(l);t=e.nodes(),i.warn("New list of nodes",t);for(const r of t){const s=e.node(r);i.warn(" Now next level",r,s),s!=null&&s.clusterNode&&T(s.graph,n+1)}},"extractor"),A=m((e,n)=>{if(n.length===0)return[];let t=Object.assign([],n);return n.forEach(o=>{const c=e.children(o),d=A(e,c);t=[...t,...d]}),t},"sorter"),re=m(e=>A(e,e.children()),"sortNodesByHierarchy"),R=m(async(e,n,t,o,c,d)=>{i.warn("Graph in recursive render:XAX",X(n),c);const r=n.graph().rankdir;i.trace("Dir in recursive render - dir:",r);const s=e.insert("g").attr("class","root");n.nodes()?i.info("Recursive render XXX",n.nodes()):i.info("No nodes found for",n),n.edges().length>0&&i.info("Recursive edges",n.edge(n.edges()[0]));const f=s.insert("g").attr("class","clusters"),E=s.insert("g").attr("class","edgePaths"),b=s.insert("g").attr("class","edgeLabels"),h=s.insert("g").attr("class","nodes");await Promise.all(n.nodes().map(async function(g){const a=n.node(g);if(c!==void 0){const u=JSON.parse(JSON.stringify(c.clusterData));i.trace(`Setting data for parent cluster XXX
 Node.id = `,g,`
 data=`,u.height,`
Parent cluster`,c.height),n.setNode(c.id,u),n.parent(g)||(i.trace("Setting parent",g,c.id),n.setParent(g,c.id,u))}if(i.info("(Insert) Node XXX"+g+": "+JSON.stringify(n.node(g))),a==null?void 0:a.clusterNode){i.info("Cluster identified XBX",g,a.width,n.node(g));const{ranksep:u,nodesep:w}=n.graph();a.graph.setGraph({...a.graph.graph(),ranksep:u+25,nodesep:w});const y=await R(h,a.graph,t,o,n.node(g),d),C=y.elem;j(a,C),a.diff=y.diff||0,i.info("New compound node after recursive render XAX",g,"width",a.width,"height",a.height),H(C,a)}else n.children(g).length>0?(i.trace("Cluster - the non recursive path XBX",g,a.id,a,a.width,"Graph:",n),i.trace(x(a.id,n)),l.set(a.id,{id:x(a.id,n),node:a})):(i.trace("Node - the non recursive path XAX",g,h,n.node(g),r),await U(h,n.node(g),{config:d,dir:r}))})),await m(async()=>{const g=n.edges().map(async function(a){const u=n.edge(a.v,a.w,a.name);i.info("Edge "+a.v+" -> "+a.w+": "+JSON.stringify(a)),i.info("Edge "+a.v+" -> "+a.w+": ",a," ",JSON.stringify(n.edge(a))),i.info("Fix",l,"ids:",a.v,a.w,"Translating: ",l.get(a.v),l.get(a.w)),await W(b,u)});await Promise.all(g)},"processEdges")(),i.info("Graph before layout:",JSON.stringify(X(n))),i.info("############################################# XXX"),i.info("###                Layout                 ### XXX"),i.info("############################################# XXX"),Q(n),i.info("Graph after layout:",JSON.stringify(X(n)));let p=0,{subGraphTitleTotalMargin:v}=Z(d);return await Promise.all(re(n).map(async function(g){var u;const a=n.node(g);if(i.info("Position XBX => "+g+": ("+a.x,","+a.y,") width: ",a.width," height: ",a.height),a==null?void 0:a.clusterNode)a.y+=v,i.info("A tainted cluster node XBX1",g,a.id,a.width,a.height,a.x,a.y,n.parent(g)),l.get(a.id).node=a,D(a);else if(n.children(g).length>0){i.info("A pure cluster node XBX1",g,a.id,a.x,a.y,a.width,a.height,n.parent(g)),a.height+=v,n.node(a.parentId);const w=(a==null?void 0:a.padding)/2||0,y=((u=a==null?void 0:a.labelBBox)==null?void 0:u.height)||0,C=y-w||0;i.debug("OffsetY",C,"labelHeight",y,"halfPadding",w),await $(f,a),l.get(a.id).node=a}else{const w=n.node(a.parentId);a.y+=v/2,i.info("A regular node XBX1 - using the padding",a.id,"parent",a.parentId,a.width,a.height,a.x,a.y,"offsetY",a.offsetY,"parent",w,w==null?void 0:w.offsetY,a),D(a)}})),n.edges().forEach(function(g){const a=n.edge(g);i.info("Edge "+g.v+" -> "+g.w+": "+JSON.stringify(a),a),a.points.forEach(C=>C.y+=v/2);const u=n.node(g.v);var w=n.node(g.w);const y=q(E,a,l,t,u,w,o);z(a,y)}),n.nodes().forEach(function(g){const a=n.node(g);i.info(g,a.type,a.diff),a.isGroup&&(p=a.diff)}),i.warn("Returning from recursive render XAX",s,p),{elem:s,diff:p}},"recursiveRender"),he=m(async(e,n)=>{var d,r,s,f,E,b;const t=new G({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:((d=e.config)==null?void 0:d.nodeSpacing)||((s=(r=e.config)==null?void 0:r.flowchart)==null?void 0:s.nodeSpacing)||e.nodeSpacing,ranksep:((f=e.config)==null?void 0:f.rankSpacing)||((b=(E=e.config)==null?void 0:E.flowchart)==null?void 0:b.rankSpacing)||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),o=n.select("g");F(o,e.markers,e.type,e.diagramId),Y(),L(),M(),te(),e.nodes.forEach(h=>{t.setNode(h.id,{...h}),h.parentId&&t.setParent(h.id,h.parentId)}),i.debug("Edges:",e.edges),e.edges.forEach(h=>{if(h.start===h.end){const p=h.start,v=p+"---"+p+"---1",g=p+"---"+p+"---2",a=t.node(p);t.setNode(v,{domId:v,id:v,parentId:a.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),t.setParent(v,a.parentId),t.setNode(g,{domId:g,id:g,parentId:a.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),t.setParent(g,a.parentId);const u=structuredClone(h),w=structuredClone(h),y=structuredClone(h);u.label="",u.arrowTypeEnd="none",u.id=p+"-cyclic-special-1",w.arrowTypeStart="none",w.arrowTypeEnd="none",w.id=p+"-cyclic-special-mid",y.label="",a.isGroup&&(u.fromCluster=p,y.toCluster=p),y.id=p+"-cyclic-special-2",y.arrowTypeStart="none",t.setEdge(p,v,u,p+"-cyclic-special-0"),t.setEdge(v,g,w,p+"-cyclic-special-1"),t.setEdge(g,p,y,p+"-cyc<lic-special-2")}else t.setEdge(h.start,h.end,{...h},h.id)}),i.warn("Graph at first:",JSON.stringify(X(t))),ie(t),i.warn("Graph after XAX:",JSON.stringify(X(t)));const c=K();await R(o,t,e.type,e.diagramId,void 0,c)},"render");export{he as render};
